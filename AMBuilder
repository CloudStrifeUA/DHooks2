# vim: set ts=2 sw=2 tw=99 noet ft=python: 
import os

for i in SM.sdkInfo:
	sdk = SM.sdkInfo[i]
	if AMBuild.target['platform'] not in sdk['platform']:
		continue

	compiler = SM.DefaultHL2Compiler('.', i)
	compiler['CXXINCLUDES'].append(os.path.join(AMBuild.cache['SMCENTRAL'], 'public'))
	compiler['CXXINCLUDES'].append(os.path.join(AMBuild.cache['SMCENTRAL'], 'public', 'sourcepawn'))
	compiler['CXXINCLUDES'].append(os.path.join(AMBuild.cache['SMCENTRAL'], 'public', 'extensions'))
	compiler['CXXINCLUDES'].append(os.path.join(AMBuild.cache['SMCENTRAL'], 'public', 'jit'))
	compiler['CXXINCLUDES'].append(os.path.join(AMBuild.cache['SMCENTRAL'], 'public', 'jit', 'x86'))
	compiler['CXXINCLUDES'].append(os.path.join(AMBuild.cache['SMCENTRAL'], 'public', 'amtl'))

	if compiler.cc.name == 'gcc':
		compiler['CFLAGS'].append('-Wno-parentheses')

	#if i != 'ep1':
	#	compiler['CDEFINES'].append('HOOKING_ENABLED')

	name = 'dhooks.ext.' + sdk['ext']
	extension = AMBuild.AddJob(name)
	binary = Cpp.LibraryBuilder(name, AMBuild, extension, compiler)
	SM.PreSetupHL2Job(extension, binary, i)
	binary.AddSourceFiles('.', [
		'extension.cpp',
		'listeners.cpp',
		'vhook.cpp',
		'natives.cpp',
		'sdk/smsdk_ext.cpp',
		'assembler-x86.cpp'
		])
	SM.PostSetupHL2Job(extension, binary, i)
	#SM.AutoVersion('.', binary)
	binary.SendToJob()

